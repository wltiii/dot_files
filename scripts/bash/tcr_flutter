#!/usr/bin/env bash
#NOTE: the above was not generated by ChatGPT
#
#write a bash script to perform test && (commit || revert) - tcr - for a flutter app
#
#Sure! Here is a bash script that will run the tests for a Flutter app, and if the tests pass, it will commit the changes. If the tests fail, it will revert the changes:

##!/bin/bash

# Run the tests for the Flutter app
#flutter test
#
## If the tests passed, commit the changes
#if [ $? -eq 0 ]; then
#  git commit -am "Run tests and commit changes"
## If the tests failed, revert the changes
#else
#  git revert --no-commit HEAD..HEAD^
#  git commit -m "Revert changes"
#fi

#This script assumes that you are in the root directory of your Flutter project, and that you have made some changes that you want to test and potentially commit.

#First, the script runs the flutter test command, which runs the tests for the Flutter app. The $? variable holds the exit status of the previous command, so if [ $? -eq 0 ]; checks if the tests passed (exit status 0 means success).

#If the tests passed, the script runs git commit with the -am flag, which will commit all changes with a commit message of "Run tests and commit changes".

#If the tests failed, the script runs git revert --no-commit HEAD..HEAD^ to revert the changes, and then git commit with the -m flag to commit the revert with a commit message of "Revert changes".

#I hope this helps! Let me know if you have any questions.

#bill.turner@changent.com
#modify it so that it runs whenever a file in the lib branch of the project is saved

#To modify the script so that it runs whenever a file in the lib branch of the project is saved, you can use the inotifywait command. This command will listen for changes to files in a specified directory and run a command when a change is detected.

#Here is how you can modify the script to use inotifywait:

##!/bin/bash

# Set the directory to watch for changes
#watch_dir=lib

# Run inotifywait in the background, watching for changes to files in the specified directory
#inotifywait -m -e close_write --format '%w%f' "$watch_dir" | while read file; do
#  # Run the tests for the Flutter app
#  flutter test
#
#  # If the tests passed, commit the changes
#  if [ $? -eq 0 ]; then
#    git commit -am "Run tests and commit changes"
#  # If the tests failed, revert the changes
#  else
#    git revert --no-commit HEAD..HEAD^
#    git commit -m "Revert changes"
#  fi
#done

#This script runs inotifywait in the background, watching for changes to files in the lib directory (which you can modify by changing the watch_dir variable). When a change is detected, inotifywait runs the commands inside the while loop.

#The script then runs the tests for the Flutter app and handles committing or reverting the changes as described in the previous version of the script.

#I hope this helps! Let me know if you have any questions.

#bill.turner@changent.com
#modify this so that changes generated source files are ignored

#To modify the script so that it ignores changes to generated source files, you can use the --exclude option of the inotifywait command. This option allows you to specify patterns to exclude from the list of files that are watched for changes.

#Here is how you can modify the script to ignore changes to generated source files:

##!/bin/bash

# Set the directory to watch for changes
#watch_dir=lib

# Run inotifywait in the background, watching for changes to files in the specified directory
#inotifywait -m -e close_write --format '%w%f' --exclude '\.g\.dart$' "$watch_dir" | while read file; do
#  # Run the tests for the Flutter app
#  flutter test
#
#  # If the tests passed, commit the changes
#  if [ $? -eq 0 ]; then
#    git commit -am "Run tests and commit changes"
#  # If the tests failed, revert the changes
#  else
#    git revert --no-commit HEAD..HEAD^
#    git commit -m "Revert changes"
#  fi
#done

#This script uses the --exclude '\.g\.dart$' option to ignore changes to files with the .g.dart extension, which are generated source files in Flutter. You can modify this pattern to exclude other types of generated files if needed.

#The rest of the script is the same as the previous version, running the tests for the Flutter app and handling committing or reverting the changes as needed.

#I hope this helps! Let me know if you have any questions.

#now include coverage when tests are run
#
#To include coverage information when running the tests for a Flutter app, you can use the --coverage flag of the flutter test command. This flag will generate a coverage report for the tests, which can be used to measure how much of the code is being tested.
#
#Here is how you can modify the script to include coverage information when running the tests:

##!/bin/bash
#
## Set the directory to watch for changes
#watch_dir=lib
#
## Run inotifywait in the background, watching for changes to files in the specified directory
#inotifywait -m -e close_write --format '%w%f' --exclude '\.g\.dart$' "$watch_dir" | while read file; do
#  # Run the tests for the Flutter app, including coverage information
#  flutter test --coverage
#  coverage=$?
#
#  # If the tests passed, commit the changes
#  if [ $coverage -eq 0 ]; then
#    git commit -am "Run tests and commit changes"
#  # If the tests failed, revert the changes
#  else
#    git revert --no-commit HEAD..HEAD^
#    git commit -m "Revert changes"
#  fi
#done

#This script uses the flutter test --coverage command to run the tests for the Flutter app, including coverage information. The coverage variable is used to store the exit status of the flutter test command, which will be 0 if the tests passed and the coverage report was generated successfully.
#
#The script then handles committing or reverting the changes as needed, as in the previous versions.
#
#I hope this helps! Let me know if you have any questions.


#when coverage is below 90% generate a html report and open it in firefox
#
#To generate a coverage report in HTML format and open it in Firefox when the coverage is below 90%, you can use the genhtml command from the lcov tool. lcov is a tool that can process coverage reports generated by various programs and output them in various formats.
#
#Here is how you can modify the script to generate a coverage report in HTML format and open it in Firefox when the coverage is below 90%:

##!/bin/bash

# Set the directory to watch for changes
watch_dir=lib

# Run inotifywait in the background, watching for changes to files in the specified directory
inotifywait -m -e close_write --format '%w%f' --exclude '\.g\.dart$' "$watch_dir" | while read file; do
  # Run the tests for the Flutter app, including coverage information
  flutter test --coverage
  coverage=$?

  # If the tests passed, commit the changes
  if [ $coverage -eq 0 ]; then
    # Check the coverage percentage
    percentage=$(lcov --summary coverage/lcov.info | grep -o "[0-9]*\.[0-9]*%" | sed 's/%//')
    if [ $(echo "$percentage < 90" | bc -l) -eq 1 ]; then
      # Generate the HTML coverage report
      genhtml coverage/lcov.info --output-directory coverage/html

      # Open the coverage report in Firefox
      firefox coverage/html/index.html
    else
      git commit -am "Run tests and commit changes"
    fi
  # If the tests failed, revert the changes
  else
    git revert --no-commit HEAD..HEAD^
    git commit -m "Revert changes"
  fi
done

#This script uses the lcov tool to extract the coverage percentage from the coverage report, and then compares it to 90% using the bc command. If the coverage is below 90%, the script uses the genhtml command to generate an HTML coverage report in the coverage/html directory. Finally, the script opens the coverage report in Firefox using the firefox command.
#
#If the coverage is above 90%, the script simply commits the changes as in the previous versions.
#
#I hope this helps! Let me know if you have any questions.
