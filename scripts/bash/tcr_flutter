#!/usr/bin/env bash
#
# HOW TO USE THIS SCRIPT:
# 1. Open a terminal and navigate to the root directory of
#    your Flutter project.
# 2. Run the script by running ./tcr_flutter
#
# HOW IT WORKS:
# The script will start watching the lib directory for changes.
# Whenever a file is saved in that directory, the script will
# run the Flutter tests with coverage information. If the tests
# pass, the script will commit all changes, including test code.
# If the tests fail, the script will revert changes to production
# code only. If the coverage is below 90%, the script will
# generate an HTML coverage report and open it in Firefox.
#
# The modified script achieves the goal of committing test code
# when committing production code, but it prevents test code from
# being reverted when production code changes are reverted. It
# does this by excluding files with a ".test.dart" or
# ".spec.dart" extension from being reverted using the
# git diff --name-only | grep -vE "\.(test|spec)\.dart$" command.
# This means that changes to test code will not be reverted when
# production code changes are reverted, but all changes (including
# test code) will be committed when tests pass.


# Set the directory to watch for changes
watch_dir=lib

# Run inotifywait in the background, watching for changes to files in the specified directory
inotifywait -m -e close_write --format '%w%f' --exclude '\.g\.dart$' "$watch_dir" | while read file; do
  # Run the tests for the Flutter app, including coverage information
  flutter test --coverage
  coverage=$?

  # If the tests passed, commit all changes (including test code)
  if [ $coverage -eq 0 ]; then
    git add -A
    # Check the coverage percentage
    percentage=$(lcov --summary coverage/lcov.info | grep -o "[0-9]*\.[0-9]*%" | sed 's/%//')
    if [ $(echo "$percentage < 90" | bc -l) -eq 1 ]; then
      # Generate the HTML coverage report
      genhtml coverage/lcov.info --output-directory coverage/html

      # Open the coverage report in Firefox
      firefox coverage/html/index.html
    fi

    git commit -m "Update code"
  # If the tests failed, revert changes to production code only
  else
    git checkout -- $(git diff --name-only | grep -vE "\.(test|spec)\.dart$")
  fi
done
